import logging
from contextlib import asynccontextmanager
from datetime import date

from fastapi import Depends, FastAPI, HTTPException, Query, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import ORJSONResponse

from app.config import CORS_ORIGINS
from app.container import Container
from app.repository.user import UserRepository
from app.schemas import (
    HealthResponse,
    ScheduleResponse,
    UserProfileResponse,
    UserProfileUpdateRequest,
)
from app.service.models import UserProfile
from app.service.scheduler_service import SchedulerService
from app.service.user_service import UserService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
container = Container()
container.config.from_dict({})
container.wire(modules=[__name__])

# –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
scheduler_service = SchedulerService()


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifespan –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è FastAPI"""
    logger.info("üöÄ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    yield
    logger.info("üõë FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–≤–∏–∂–æ–∫ –ë–î
    if _engine:
        await _engine.dispose()


def create_app() -> FastAPI:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = FastAPI(
        title="Google Sheets Events API",
        description="API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –∏–∑ Google Sheets",
        version="1.0.0",
        default_response_class=ORJSONResponse,
        lifespan=lifespan,
    )

    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
    app.add_middleware(
        CORSMiddleware,
        allow_origins=CORS_ORIGINS,
        allow_credentials=True,
        allow_methods=["GET", "POST", "OPTIONS"],
        allow_headers=["Content-Type", "Authorization", "Accept"],
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ dependency injection
    app.container = container

    return app


# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = create_app()


# Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
def get_scheduler_service() -> SchedulerService:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    return scheduler_service


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–≤–∏–∂–∫–∞ –∏ —Ñ–∞–±—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–π
_engine = None
_session_factory = None


def get_engine():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –ë–î (—Å–∏–Ω–≥–ª—Ç–æ–Ω)"""
    global _engine
    if _engine is None:
        from sqlalchemy.ext.asyncio import create_async_engine

        _engine = create_async_engine(
            "sqlite+aiosqlite:///./zalupix.db", echo=False, future=True
        )
    return _engine


def get_session_factory():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–π (—Å–∏–Ω–≥–ª—Ç–æ–Ω)"""
    global _session_factory
    if _session_factory is None:
        from sqlalchemy.ext.asyncio import async_sessionmaker

        _session_factory = async_sessionmaker(get_engine(), expire_on_commit=False)
    return _session_factory


async def get_db_session():
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î"""
    session_factory = get_session_factory()
    async with session_factory() as session:
        try:
            yield session
        except Exception:
            await session.rollback()
            raise
        finally:
            await session.close()


def get_user_service(db_session=Depends(get_db_session)) -> UserService:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    repository = UserRepository(db_session)
    return UserService(repository)


# –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π on_event, –∏—Å–ø–æ–ª—å–∑—É–µ–º lifespan


@app.get("/health")
async def health_check(
    scheduler_service: SchedulerService = Depends(get_scheduler_service),
) -> HealthResponse:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    try:
        logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è health check")
        if scheduler_service.is_connected():
            logger.info("Google API –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return HealthResponse(status="healthy", google_api="connected")
        else:
            logger.warning("Google API –æ—Ç–∫–ª—é—á–µ–Ω")
            return HealthResponse(status="healthy", google_api="disconnected")
    except Exception as e:
        logger.error(f"Health check failed: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Health check failed: {str(e)}")


@app.get("/schedule")
async def get_schedule(
    refresh: bool = Query(
        default=False, description="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞", examples=[False]
    ),
    start_date: date = Query(
        default=None, description="–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", examples=[None]
    ),
    end_date: date = Query(default=None, description="–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", examples=[None]),
    scheduler_service: SchedulerService = Depends(get_scheduler_service),
) -> ScheduleResponse:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"""
    try:
        if refresh:
            logger.info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            events = await scheduler_service.refresh_events()
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π")
            return ScheduleResponse(events=events)
        else:
            logger.info("–ó–∞–ø—Ä–æ—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            events = await scheduler_service.get_events(start_date, end_date)
            return ScheduleResponse(events=events)
    except Exception as e:
        logger.error(f"Failed to get schedule: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Failed to get schedule: {str(e)}")


@app.post("/schedule/add")
async def add_schedule(
    schedule: ScheduleResponse,
    scheduler_service: SchedulerService = Depends(get_scheduler_service),
) -> ScheduleResponse:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ TODO"""
    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {schedule}")

    scheduler_service.add_event(schedule.events)
    return ScheduleResponse(events=[])


@app.get("/user/{telegram_id}")
async def get_user_profile(
    telegram_id: int,
    user_service: UserService = Depends(get_user_service),
) -> UserProfileResponse:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è TODO"""
    user_profile = await user_service.get_user_profile(telegram_id)
    if user_profile is None:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return UserProfileResponse(user_profile=user_profile)


@app.post("/user/create")
async def create_user_profile(
    user_profile: UserProfile,
    user_service: UserService = Depends(get_user_service),
) -> UserProfileResponse:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_profile}")
    result = await user_service.create_user_profile(user_profile)
    return UserProfileResponse(user_profile=result)


@app.post("/user/update")
async def update_user_profile(
    update_request: UserProfileUpdateRequest,
    user_service: UserService = Depends(get_user_service),
) -> bool:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–ª–µ–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update_request}")
    result = await user_service.update_user_profile(
        update_request.telegram_id, update_request
    )
    return result is not None


@app.post("/auth/telegram")
async def telegram_auth(request: Request) -> dict:
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Mini App"""
    try:
        data = await request.json()
        init_data = data.get("init_data")

        if not init_data:
            raise HTTPException(status_code=400, detail="init_data is required")

        # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é init_data —Å –ø–æ–º–æ—â—å—é BOT_TOKEN
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        logger.info("Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        return {"success": True, "message": "Telegram auth successful"}

    except Exception as e:
        logger.error(f"Telegram auth failed: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Telegram auth failed: {str(e)}")


@app.get("/auth/telegram/user")
async def get_telegram_user(request: Request) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–ª–∏ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        user_id = request.headers.get("X-Telegram-User-ID")

        if not user_id:
            raise HTTPException(status_code=400, detail="Telegram user ID is required")

        # TODO: –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram: {user_id}")
        return {"user_id": user_id, "status": "authenticated"}

    except Exception as e:
        logger.error(f"Failed to get Telegram user: {str(e)}")
        raise HTTPException(
            status_code=500, detail=f"Failed to get Telegram user: {str(e)}"
        )


if __name__ == "__main__":
    print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: python run.py")
