import logging
from contextlib import asynccontextmanager
from datetime import date

from fastapi import Depends, FastAPI, HTTPException, Query
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import ORJSONResponse
from schemas import (
    HealthResponse,
    ScheduleResponse,
    UserProfileUpdateRequest,
    UserProfileResponse,
)
from service.scheduler_service import SchedulerService
from service.user_service import UserService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
scheduler_service = SchedulerService()
user_service = UserService()


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifespan –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è FastAPI"""
    logger.info("üöÄ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    yield
    logger.info("üõë FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")


def create_app() -> FastAPI:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = FastAPI(
        title="Google Sheets Events API",
        description="API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –∏–∑ Google Sheets",
        version="1.0.0",
        default_response_class=ORJSONResponse,
        lifespan=lifespan,
    )

    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
    app.add_middleware(
        CORSMiddleware,
        allow_origins=[
            "http://localhost:8000",
            "http://localhost:3000",
            "http://127.0.0.1:3000",
            "http://localhost:5173",
            "http://127.0.0.1:5173",
        ],
        allow_credentials=True,
        allow_methods=["GET", "POST", "OPTIONS"],
        allow_headers=["Content-Type", "Authorization", "Accept"],
    )

    return app


# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = create_app()


# Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
def get_scheduler_service() -> SchedulerService:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    return scheduler_service

def get_user_service() -> UserService:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_service


# –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π on_event, –∏—Å–ø–æ–ª—å–∑—É–µ–º lifespan


@app.get("/health")
async def health_check(
    scheduler_service: SchedulerService = Depends(get_scheduler_service),
) -> HealthResponse:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    try:
        logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è health check")
        if scheduler_service.is_connected():
            logger.info("Google API –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return HealthResponse(status="healthy", google_api="connected")
        else:
            logger.warning("Google API –æ—Ç–∫–ª—é—á–µ–Ω")
            return HealthResponse(status="healthy", google_api="disconnected")
    except Exception as e:
        logger.error(f"Health check failed: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Health check failed: {str(e)}")


@app.get("/schedule")
async def get_schedule(
    refresh: bool = Query(
        default=False, description="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞", examples=[False]
    ),
    start_date: date = Query(
        default=None, description="–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", examples=[None]
    ),
    end_date: date = Query(
        default=None, description="–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", examples=[None]
    ),
    scheduler_service: SchedulerService = Depends(get_scheduler_service),
) -> ScheduleResponse:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"""
    try:
        if refresh:
            logger.info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            events = await scheduler_service.refresh_events()
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π")
            return ScheduleResponse(events=events)
        else:
            logger.info("–ó–∞–ø—Ä–æ—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            events = await scheduler_service.get_events(start_date, end_date)
            return ScheduleResponse(events=events)
    except Exception as e:
        logger.error(f"Failed to get schedule: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Failed to get schedule: {str(e)}")


@app.post("/schedule/add")
async def add_schedule(
    schedule: ScheduleResponse,
    scheduler_service: SchedulerService = Depends(get_scheduler_service),
) -> ScheduleResponse:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ TODO"""
    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {schedule}")

    scheduler_service.add_event(schedule.events)
    return ScheduleResponse(events=[])


@app.get("/user/{telegram_id}")
async def get_user_profile(
    telegram_id: int,
    user_service: UserService = Depends(get_user_service),
) -> UserProfileResponse:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è TODO"""
    # TODO: –¥–æ–¥–µ–ª–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return UserProfileResponse(
        user_profile=user_service.get_user_profile(telegram_id)
    )


@app.post("/user/update")
async def update_user_profile(
    update_request: UserProfileUpdateRequest,
    user_service: UserService = Depends(get_user_service),
) -> bool:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–ª–µ–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è TODO"""
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update_request}")
    # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ user_service
    return user_service.update_user_profile(update_request)


if __name__ == "__main__":
    import uvicorn

    uvicorn.run("app:app", host="0.0.0.0", port=8000, reload=True)
