#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

import asyncio
import os

from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker

from app.config import settings
from app.models import Base
from app.repository.user import UserRepository
from app.service.csv_import_service import CSVImportService
from app.service.user_service import UserService


async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    # –°–æ–∑–¥–∞–µ–º engine
    engine = create_async_engine(settings.database_url, echo=True)

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

    return engine, async_session


async def import_initial_data(csv_path: str = "app/init.csv"):
    """–ò–º–ø–æ—Ä—Ç –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    engine, async_session = await init_database()

    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        async with async_session() as session:
            user_repository = UserRepository(session)
            user_service = UserService(user_repository)
            csv_service = CSVImportService(user_service)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
            if not os.path.exists(csv_path):
                print(f"‚ùå –§–∞–π–ª {csv_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            print(f"üìÅ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {csv_path}...")

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            result = await csv_service.import_from_csv(csv_path)

            if result["success"]:
                print("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                print(f"   üìä –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {result['imported_count']}")
                print(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {result['skipped_count']}")
            else:
                print("‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:")
                for error in result["errors"]:
                    print(f"   - {error}")

    finally:
        await engine.dispose()


async def export_data(output_path: str = "app/export.csv"):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª"""
    print("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    engine, async_session = await init_database()

    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        async with async_session() as session:
            user_repository = UserRepository(session)
            user_service = UserService(user_repository)
            csv_service = CSVImportService(user_service)

            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            result = await csv_service.export_to_csv(output_path)

            if result["success"]:
                print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                print(f"   üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {result['exported_count']} –∑–∞–ø–∏—Å–µ–π")
                print(f"   üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
            else:
                print("‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:")
                for error in result["errors"]:
                    print(f"   - {error}")

    finally:
        await engine.dispose()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument(
        "--action",
        choices=["import", "export", "both"],
        default="import",
        help="–î–µ–π—Å—Ç–≤–∏–µ: import (–∏–º–ø–æ—Ä—Ç), export (—ç–∫—Å–ø–æ—Ä—Ç), both (–æ–±–∞)",
    )
    parser.add_argument(
        "--input", default="app/init.csv", help="–ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É CSV —Ñ–∞–π–ª—É"
    )
    parser.add_argument(
        "--output", default="app/export.csv", help="–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É CSV —Ñ–∞–π–ª—É"
    )

    args = parser.parse_args()

    if args.action in ["import", "both"]:
        await import_initial_data(args.input)

    if args.action in ["export", "both"]:
        await export_data(args.output)


if __name__ == "__main__":
    asyncio.run(main())
